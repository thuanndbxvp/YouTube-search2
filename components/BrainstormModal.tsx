import React, { useState, useEffect, useRef } from 'react';
import { ChannelInfo, StoredConfig, AiProvider, ChatMessage, Video } from '../types';
import { generateGeminiChatResponse } from '../services/geminiService';
import { generateOpenAIChatResponse } from '../services/openaiService';
import { PaperAirplaneIcon, UsersIcon } from './Icons';
import { formatDate, formatNumber, parseISO8601Duration } from '../utils/formatters';

interface BrainstormModalProps {
  isOpen: boolean;
  onClose: () => void;
  channelInfo: ChannelInfo;
  appConfig: StoredConfig;
  messages: ChatMessage[];
  setMessages: React.Dispatch<React.SetStateAction<ChatMessage[]>>;
  videos: Video[];
}

const AiProviderSelector: React.FC<{
    selected: AiProvider;
    onSelect: (provider: AiProvider) => void;
    config: StoredConfig;
}> = ({ selected, onSelect, config }) => {
    const hasGemini = !!config.gemini.key;
    const hasOpenAI = !!config.openai.key;

    const buttonClass = (provider: AiProvider) => 
        `px-4 py-2 text-sm font-semibold rounded-md transition-colors ${
            selected === provider 
            ? 'bg-indigo-600 text-white' 
            : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
        }`;

    return (
        <div className="flex justify-center space-x-2 mb-4">
            {hasGemini && <button onClick={() => onSelect('gemini')} className={buttonClass('gemini')}>Gemini</button>}
            {hasOpenAI && <button onClick={() => onSelect('openai')} className={buttonClass('openai')}>ChatGPT</button>}
        </div>
    )
};

const ANALYSIS_PROMPT_IDENTIFIER = "V·ªõi t∆∞ c√°ch l√† m·ªôt chuy√™n gia ph√¢n t√≠ch k√™nh YouTube";

export const BrainstormModal: React.FC<BrainstormModalProps> = ({ isOpen, onClose, channelInfo, appConfig, messages, setMessages, videos }) => {
  const [selectedAi, setSelectedAi] = useState<AiProvider>('gemini');
  const [currentMessage, setCurrentMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isOpen) return;
    // Set default AI provider based on available keys
    if (appConfig.gemini.key) {
        setSelectedAi('gemini');
    } else if (appConfig.openai.key) {
        setSelectedAi('openai');
    }
  }, [isOpen, appConfig.gemini.key, appConfig.openai.key]);

  useEffect(() => {
    // Auto-scroll to the bottom of the chat
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const handleAudienceAnalysis = async () => {
    const hasExistingAnalysis = messages.some(
        msg => msg.role === 'user' && msg.content.startsWith(ANALYSIS_PROMPT_IDENTIFIER)
    );

    if (hasExistingAnalysis || isAnalyzing || isLoading) {
        return;
    }

    setIsLoading(true);
    setIsAnalyzing(true);
    
    const videoDataSummary = videos.slice(0, 50).map((video, index) => {
        return `
---
Video ${index + 1}:
- Ti√™u ƒë·ªÅ: ${video.snippet.title}
- Ng√†y ƒëƒÉng: ${formatDate(video.snippet.publishedAt)}
- L∆∞·ª£t xem: ${formatNumber(video.statistics.viewCount)}
- L∆∞·ª£t th√≠ch: ${formatNumber(video.statistics.likeCount)}
- Th·ªùi l∆∞·ª£ng: ${parseISO8601Duration(video.contentDetails.duration)}
- M√¥ t·∫£: ${(video.snippet.description || 'Kh√¥ng c√≥').substring(0, 250)}...
---
`.trim();
    }).join('\n\n');

    const audienceAnalysisPrompt = `${ANALYSIS_PROMPT_IDENTIFIER}, h√£y th·ª±c hi·ªán m·ªôt b√†i ph√¢n t√≠ch s√¢u v·ªÅ ƒë·ªëi t∆∞·ª£ng kh√°n gi·∫£ c·ªßa k√™nh "${channelInfo.title}", d·ª±a tr√™n d·ªØ li·ªáu t·ª´ c√°c video g·∫ßn ƒë√¢y.

D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu th√¥ t·ª´ ${videos.length} video g·∫ßn ƒë√¢y nh·∫•t ƒë·ªÉ b·∫°n tham kh·∫£o:

${videoDataSummary}

Vui l√≤ng s·ª≠ d·ª•ng d·ªØ li·ªáu tr√™n ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch v√† tu√¢n th·ªß c·∫•u tr√∫c sau:

1. **X√°c ƒë·ªãnh m·ª•c ti√™u ph√¢n t√≠ch**
   - üìà **Chi·∫øn l∆∞·ª£c n·ªôi dung:** C√°c ch·ªß ƒë·ªÅ, t·∫ßn su·∫•t, phong c√°ch ch√≠nh c·ªßa k√™nh l√† g√¨?
   - üéØ **ƒê·ªëi t∆∞·ª£ng kh√°n gi·∫£ m·ª•c ti√™u:** M√¥ t·∫£ ch√¢n dung kh√°n gi·∫£ (ƒë·ªô tu·ªïi, s·ªü th√≠ch, h√†nh vi xem).
   - üí∞ **Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông:** ƒê√°nh gi√° s∆° b·ªô v·ªÅ l∆∞·ª£t xem, t∆∞∆°ng t√°c, v√† t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng.
   - üß† **ƒêi·ªÉm kh√°c bi·ªát:** Y·∫øu t·ªë n√†o l√†m n√™n th∆∞∆°ng hi·ªáu ri√™ng cho k√™nh?

2. **Ph√¢n lo·∫°i n·ªôi dung & Ch·ªß ƒë·ªÅ**
   - D·ª±a tr√™n danh s√°ch c√°c video ƒë√£ cung c·∫•p, h√£y nh√≥m ch√∫ng v√†o c√°c ch·ªß ƒë·ªÅ ch√≠nh.

3. **Ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng (Quantitative Analysis)**
   - L∆∞·ª£t xem trung b√¨nh/video l√† bao nhi√™u?
   - T·ª∑ l·ªá t∆∞∆°ng t√°c (like/view) ∆∞·ªõc t√≠nh.
   - T·∫ßn su·∫•t ƒëƒÉng t·∫£i video (v√≠ d·ª•: h√†ng tu·∫ßn, h√†ng th√°ng).
   - Th·ªùi l∆∞·ª£ng video trung b√¨nh.
   - C√≥ xu h∆∞·ªõng ch·ªß ƒë·ªÅ n√†o ƒëang tƒÉng tr∆∞·ªüng v·ªÅ l∆∞·ª£t xem kh√¥ng?

4. **Ph√¢n t√≠ch ƒë·ªãnh t√≠nh (Qualitative Analysis)**
   - **C·∫•u tr√∫c n·ªôi dung:** M√¥ t·∫£ c·∫•u tr√∫c k·ªÉ chuy·ªán ƒëi·ªÉn h√¨nh (M·ªü ƒë·∫ßu ‚Äì Ph√°t tri·ªÉn ‚Äì K·∫øt lu·∫≠n).
   - **Phong c√°ch k·ªÉ chuy·ªán:** K√™nh theo phong c√°ch n√†o (T√†i li·ªáu, b√≠ ·∫©n, t√¢m l√Ω, ƒëi·ªán ·∫£nh, v.v.)?
   - **Tone th∆∞∆°ng hi·ªáu:** T√¥ng gi·ªçng c·ªßa k√™nh l√† g√¨ (Nghi√™m t√∫c, b√≠ ·∫©n, h·ªçc thu·∫≠t, ho√†i c·ªï)?
   - **H√¨nh ·∫£nh & √Çm nh·∫°c:** Nh·∫≠n x√©t v·ªÅ tone m√†u, nh·ªãp ƒë·ªô d·ª±ng phim, v√† c√°ch s·ª≠ d·ª•ng nh·∫°c n·ªÅn.
   - **T·ªïng k·∫øt:** K√™nh mang l·∫°i tr·∫£i nghi·ªám c·∫£m x√∫c g√¨ cho ng∆∞·ªùi xem?

H√£y tr√¨nh b√†y ph√¢n t√≠ch c·ªßa b·∫°n m·ªôt c√°ch chi ti·∫øt v√† chuy√™n nghi·ªáp, s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ cung c·∫•p l√†m c∆° s·ªü.`;

    const userMessage: ChatMessage = { role: 'user', content: audienceAnalysisPrompt };
    
    const initialMessages = messages.length > 1 ? messages : [];
    const historyForApi = [...initialMessages, userMessage];

    setMessages(historyForApi);

    try {
        let response: string;
        if (selectedAi === 'gemini') {
            response = await generateGeminiChatResponse(appConfig.gemini.key, appConfig.gemini.model, historyForApi);
        } else {
            response = await generateOpenAIChatResponse(appConfig.openai.key, appConfig.openai.model, historyForApi);
        }
        const finalAiMessage: ChatMessage = { role: 'model', content: response };
        setMessages(prev => [...prev, finalAiMessage]);
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "ƒê√£ c√≥ l·ªói x·∫£y ra.";
        const errorAiMessage: ChatMessage = { role: 'model', content: `L·ªói: ${errorMessage}` };
        setMessages(prev => [...prev, errorAiMessage]);
    } finally {
        setIsLoading(false);
        setIsAnalyzing(false);
    }
  };


  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    const trimmedMessage = currentMessage.trim();
    if (!trimmedMessage || isLoading) return;

    const userMessage: ChatMessage = { role: 'user', content: trimmedMessage };
    setMessages(prev => [...prev, userMessage]);
    const historyForApi = [...messages, userMessage];
    
    setCurrentMessage('');
    setIsLoading(true);

    try {
        let response: string;
        if (selectedAi === 'gemini') {
            response = await generateGeminiChatResponse(appConfig.gemini.key, appConfig.gemini.model, historyForApi);
        } else {
            response = await generateOpenAIChatResponse(appConfig.openai.key, appConfig.openai.model, historyForApi);
        }
        setMessages(prev => [...prev, { role: 'model', content: response }]);
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "ƒê√£ c√≥ l·ªói x·∫£y ra.";
        setMessages(prev => [...prev, { role: 'model', content: `L·ªói: ${errorMessage}` }]);
    } finally {
        setIsLoading(false);
    }
  };

  const hasExistingAnalysis = messages.some(
    msg => msg.role === 'user' && msg.content.startsWith(ANALYSIS_PROMPT_IDENTIFIER)
  );


  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 transition-opacity" onClick={onClose}>
      <div className="bg-[#24283b] rounded-lg shadow-2xl w-full max-w-2xl flex flex-col" style={{ height: '80vh' }} onClick={(e) => e.stopPropagation()}>
        <div className="p-4 border-b border-gray-700">
          <div className="flex justify-between items-center">
             <h2 className="text-xl font-bold text-white">Brainstorm & Ph√¢n t√≠ch v·ªõi AI</h2>
             <button onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none">&times;</button>
          </div>
          <p className="text-sm text-gray-400">K√™nh ƒëang ph√¢n t√≠ch: {channelInfo.title}</p>
        </div>

        <AiProviderSelector selected={selectedAi} onSelect={setSelectedAi} config={appConfig} />

        <div ref={chatContainerRef} className="flex-grow p-4 overflow-y-auto space-y-4">
            {messages.map((msg, index) => (
                <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-lg p-3 rounded-lg ${msg.role === 'user' ? 'bg-indigo-700 text-white' : 'bg-gray-700 text-gray-200'}`}>
                        <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                    </div>
                </div>
            ))}
            {isLoading && (
                 <div className="flex justify-start">
                    <div className="max-w-lg p-3 rounded-lg bg-gray-700 text-gray-200">
                        <div className="flex items-center space-x-2">
                           <div className="w-2 h-2 bg-indigo-300 rounded-full animate-pulse"></div>
                           <div className="w-2 h-2 bg-indigo-300 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                           <div className="w-2 h-2 bg-indigo-300 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                        </div>
                    </div>
                </div>
            )}
        </div>

        <div className="p-4 border-t border-gray-700">
          <div className="mb-2">
                <button
                    onClick={handleAudienceAnalysis}
                    disabled={isLoading || hasExistingAnalysis}
                    className="w-full flex items-center justify-center text-sm bg-sky-600 hover:bg-sky-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed"
                >
                    <UsersIcon className="h-5 w-5 mr-2" />
                    {isAnalyzing ? 'ƒêang ph√¢n t√≠ch...' : (hasExistingAnalysis ? 'ƒê√£ ph√¢n t√≠ch k√™nh' : 'Ph√¢n t√≠ch ƒë·ªëi t∆∞·ª£ng kh√°n gi·∫£')}
                </button>
          </div>
          <form onSubmit={handleSendMessage} className="flex items-center space-x-2">
            <input
              type="text"
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c √Ω t∆∞·ªüng c·ªßa b·∫°n..."
              className="w-full bg-[#1a1b26] border border-[#414868] rounded-lg px-4 py-2 text-sm text-white focus:ring-1 focus:ring-indigo-500 outline-none"
              disabled={isLoading}
            />
            <button type="submit" disabled={isLoading || !currentMessage.trim()} className="bg-indigo-600 hover:bg-indigo-700 text-white p-2.5 rounded-lg disabled:opacity-50 transition-colors">
              <PaperAirplaneIcon className="w-5 h-5" />
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};