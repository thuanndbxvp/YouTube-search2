import React, { useState } from 'react';
import { ChannelInfo, StoredConfig, ChatMessage, AiProvider, Video } from '../types';
import { BrainstormModal } from './BrainstormModal';
import { SparklesIcon, UsersIcon } from './Icons';
import { generateGeminiChatResponse } from '../services/geminiService';
import { generateOpenAIChatResponse } from '../services/openaiService';
import { formatDate, formatNumber, parseISO8601Duration } from '../utils/formatters';


interface AnalysisToolsProps {
    videos: Video[];
    channelInfo: ChannelInfo;
    appConfig: StoredConfig;
    brainstormMessages: ChatMessage[];
    setBrainstormMessages: React.Dispatch<React.SetStateAction<ChatMessage[]>>;
}

const ANALYSIS_PROMPT_IDENTIFIER = "V·ªõi t∆∞ c√°ch l√† m·ªôt chuy√™n gia ph√¢n t√≠ch k√™nh YouTube";

export const AnalysisTools: React.FC<AnalysisToolsProps> = ({ videos, channelInfo, appConfig, brainstormMessages, setBrainstormMessages }) => {
    const [isBrainstormModalOpen, setIsBrainstormModalOpen] = useState(false);
    const [isAnalyzing, setIsAnalyzing] = useState(false);

    const isBrainstormDisabled = (!appConfig.gemini.key || appConfig.gemini.key.trim() === '') && 
                                 (!appConfig.openai.key || appConfig.openai.key.trim() === '');

    const handleAudienceAnalysis = async () => {
        const hasExistingAnalysis = brainstormMessages.some(
            msg => msg.role === 'user' && msg.content.startsWith(ANALYSIS_PROMPT_IDENTIFIER)
        );

        if (hasExistingAnalysis) {
            setIsBrainstormModalOpen(true);
            return;
        }

        setIsAnalyzing(true);
        setIsBrainstormModalOpen(true);

        const provider: AiProvider = appConfig.gemini.key && appConfig.gemini.key.trim() !== '' ? 'gemini' : 'openai';
        
        const videoDataSummary = videos.slice(0, 50).map((video, index) => {
            return `
---
Video ${index + 1}:
- Ti√™u ƒë·ªÅ: ${video.snippet.title}
- Ng√†y ƒëƒÉng: ${formatDate(video.snippet.publishedAt)}
- L∆∞·ª£t xem: ${formatNumber(video.statistics.viewCount)}
- L∆∞·ª£t th√≠ch: ${formatNumber(video.statistics.likeCount)}
- Th·ªùi l∆∞·ª£ng: ${parseISO8601Duration(video.contentDetails.duration)}
- M√¥ t·∫£: ${(video.snippet.description || 'Kh√¥ng c√≥').substring(0, 250)}...
---
`.trim();
        }).join('\n\n');

        const audienceAnalysisPrompt = `${ANALYSIS_PROMPT_IDENTIFIER}, h√£y th·ª±c hi·ªán m·ªôt b√†i ph√¢n t√≠ch s√¢u v·ªÅ ƒë·ªëi t∆∞·ª£ng kh√°n gi·∫£ c·ªßa k√™nh "${channelInfo.title}", d·ª±a tr√™n d·ªØ li·ªáu t·ª´ c√°c video g·∫ßn ƒë√¢y.

D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu th√¥ t·ª´ ${videos.length} video g·∫ßn ƒë√¢y nh·∫•t ƒë·ªÉ b·∫°n tham kh·∫£o:

${videoDataSummary}

Vui l√≤ng s·ª≠ d·ª•ng d·ªØ li·ªáu tr√™n ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch v√† tu√¢n th·ªß c·∫•u tr√∫c sau:

1. **X√°c ƒë·ªãnh m·ª•c ti√™u ph√¢n t√≠ch**
   - üìà **Chi·∫øn l∆∞·ª£c n·ªôi dung:** C√°c ch·ªß ƒë·ªÅ, t·∫ßn su·∫•t, phong c√°ch ch√≠nh c·ªßa k√™nh l√† g√¨?
   - üéØ **ƒê·ªëi t∆∞·ª£ng kh√°n gi·∫£ m·ª•c ti√™u:** M√¥ t·∫£ ch√¢n dung kh√°n gi·∫£ (ƒë·ªô tu·ªïi, s·ªü th√≠ch, h√†nh vi xem).
   - üí∞ **Hi·ªáu qu·∫£ ho·∫°t ƒë·ªông:** ƒê√°nh gi√° s∆° b·ªô v·ªÅ l∆∞·ª£t xem, t∆∞∆°ng t√°c, v√† t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng.
   - üß† **ƒêi·ªÉm kh√°c bi·ªát:** Y·∫øu t·ªë n√†o l√†m n√™n th∆∞∆°ng hi·ªáu ri√™ng cho k√™nh?

2. **Ph√¢n lo·∫°i n·ªôi dung & Ch·ªß ƒë·ªÅ**
   - D·ª±a tr√™n danh s√°ch c√°c video ƒë√£ cung c·∫•p, h√£y nh√≥m ch√∫ng v√†o c√°c ch·ªß ƒë·ªÅ ch√≠nh.

3. **Ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng (Quantitative Analysis)**
   - L∆∞·ª£t xem trung b√¨nh/video l√† bao nhi√™u?
   - T·ª∑ l·ªá t∆∞∆°ng t√°c (like/view) ∆∞·ªõc t√≠nh.
   - T·∫ßn su·∫•t ƒëƒÉng t·∫£i video (v√≠ d·ª•: h√†ng tu·∫ßn, h√†ng th√°ng).
   - Th·ªùi l∆∞·ª£ng video trung b√¨nh.
   - C√≥ xu h∆∞·ªõng ch·ªß ƒë·ªÅ n√†o ƒëang tƒÉng tr∆∞·ªüng v·ªÅ l∆∞·ª£t xem kh√¥ng?

4. **Ph√¢n t√≠ch ƒë·ªãnh t√≠nh (Qualitative Analysis)**
   - **C·∫•u tr√∫c n·ªôi dung:** M√¥ t·∫£ c·∫•u tr√∫c k·ªÉ chuy·ªán ƒëi·ªÉn h√¨nh (M·ªü ƒë·∫ßu ‚Äì Ph√°t tri·ªÉn ‚Äì K·∫øt lu·∫≠n).
   - **Phong c√°ch k·ªÉ chuy·ªán:** K√™nh theo phong c√°ch n√†o (T√†i li·ªáu, b√≠ ·∫©n, t√¢m l√Ω, ƒëi·ªán ·∫£nh, v.v.)?
   - **Tone th∆∞∆°ng hi·ªáu:** T√¥ng gi·ªçng c·ªßa k√™nh l√† g√¨ (Nghi√™m t√∫c, b√≠ ·∫©n, h·ªçc thu·∫≠t, ho√†i c·ªï)?
   - **H√¨nh ·∫£nh & √Çm nh·∫°c:** Nh·∫≠n x√©t v·ªÅ tone m√†u, nh·ªãp ƒë·ªô d·ª±ng phim, v√† c√°ch s·ª≠ d·ª•ng nh·∫°c n·ªÅn.
   - **T·ªïng k·∫øt:** K√™nh mang l·∫°i tr·∫£i nghi·ªám c·∫£m x√∫c g√¨ cho ng∆∞·ªùi xem?

H√£y tr√¨nh b√†y ph√¢n t√≠ch c·ªßa b·∫°n m·ªôt c√°ch chi ti·∫øt v√† chuy√™n nghi·ªáp, s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ cung c·∫•p l√†m c∆° s·ªü.`;

        const userMessage: ChatMessage = { role: 'user', content: audienceAnalysisPrompt };
        
        const initialMessages = brainstormMessages.length > 1 ? brainstormMessages : [];
        const newMessagesWithUserPrompt: ChatMessage[] = [...initialMessages, userMessage];

        setBrainstormMessages(newMessagesWithUserPrompt);

        try {
            let response: string;
            if (provider === 'gemini') {
                response = await generateGeminiChatResponse(appConfig.gemini.key, appConfig.gemini.model, newMessagesWithUserPrompt);
            } else {
                response = await generateOpenAIChatResponse(appConfig.openai.key, appConfig.openai.model, newMessagesWithUserPrompt);
            }
            const finalAiMessage: ChatMessage = { role: 'model', content: response };
            setBrainstormMessages([...newMessagesWithUserPrompt, finalAiMessage]);
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : "ƒê√£ c√≥ l·ªói x·∫£y ra.";
            const errorAiMessage: ChatMessage = { role: 'model', content: `L·ªói: ${errorMessage}` };
            setBrainstormMessages([...newMessagesWithUserPrompt, errorAiMessage]);
        } finally {
            setIsAnalyzing(false);
        }
    };

    return (
        <>
            <BrainstormModal
                isOpen={isBrainstormModalOpen}
                onClose={() => setIsBrainstormModalOpen(false)}
                channelInfo={channelInfo}
                appConfig={appConfig}
                messages={brainstormMessages}
                setMessages={setBrainstormMessages}
            />
            <div>
                <h2 className="text-xl font-bold text-indigo-300 mb-2">
                    C√¥ng c·ª• Ph√¢n t√≠ch & S√°ng t·∫°o
                </h2>
                <p className="text-gray-400 mb-4 text-sm">
                    S·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë·ªÉ hi·ªÉu s√¢u h∆°n v·ªÅ k√™nh v√† t√¨m ki·∫øm √Ω t∆∞·ªüng m·ªõi.
                </p>
                <div className="flex flex-col space-y-3">
                    <button 
                        onClick={() => setIsBrainstormModalOpen(true)}
                        disabled={isBrainstormDisabled}
                        title={isBrainstormDisabled ? "Vui l√≤ng th√™m API key c·ªßa Gemini ho·∫∑c OpenAI ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y" : "B·∫Øt ƒë·∫ßu phi√™n brainstorm √Ω t∆∞·ªüng v·ªõi AI"}
                        className="w-full flex items-center justify-center bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2.5 px-4 rounded-lg transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed">
                        <SparklesIcon className="h-5 w-5 mr-2" />
                        Brainstorm √ù t∆∞·ªüng
                    </button>
                     <button 
                        onClick={handleAudienceAnalysis}
                        disabled={isBrainstormDisabled || isAnalyzing}
                        title={isBrainstormDisabled ? "Vui l√≤ng th√™m API key ƒë·ªÉ s·ª≠ d·ª•ng" : "Ph√¢n t√≠ch k√™nh"}
                        className="w-full flex items-center justify-center bg-sky-600 hover:bg-sky-700 text-white font-semibold py-2.5 px-4 rounded-lg transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed">
                        <UsersIcon className="h-5 w-5 mr-2" />
                        {isAnalyzing ? 'ƒêang ph√¢n t√≠ch...' : 'Ph√¢n t√≠ch k√™nh'}
                    </button>
                </div>
            </div>
        </>
    );
};